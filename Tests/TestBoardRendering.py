import unittest
from io import StringIO
import sys

from Board import Board
from BoardConsoleRenderer import BoardConsoleRenderer
from Coordinates import Coordinates
from entities.Herbivore import Herbivore
from entities.Predator import Predator


class TestBoardRendering(unittest.TestCase):
    def setUp(self):
        """–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º."""
        self.board = Board(3,3)  # –î–æ—Å–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–º 3x3
        self.renderer = BoardConsoleRenderer()


    def test_empty_board_rendering(self):
        """–¢–µ—Å—Ç –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—É—Å—Ç–æ–π –¥–æ—Å–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–º 3x3."""
        expected_output = (
        f" 3  {self.renderer.ANSI_BLACK_SQUARE_BACKGROUND}  {self.renderer.TAB}" + f"{self.renderer.ANSI_WHITE_SQUARE_BACKGROUND}  {self.renderer.TAB}" + f"{self.renderer.ANSI_BLACK_SQUARE_BACKGROUND}  {self.renderer.TAB}{self.renderer.ANSI_RESET}\n" +
        f" 2  {self.renderer.ANSI_WHITE_SQUARE_BACKGROUND}  {self.renderer.TAB}" + f"{self.renderer.ANSI_BLACK_SQUARE_BACKGROUND}  {self.renderer.TAB}" + f"{self.renderer.ANSI_WHITE_SQUARE_BACKGROUND}  {self.renderer.TAB}{self.renderer.ANSI_RESET}\n" +
        f" 1  {self.renderer.ANSI_BLACK_SQUARE_BACKGROUND}  {self.renderer.TAB}" + f"{self.renderer.ANSI_WHITE_SQUARE_BACKGROUND}  {self.renderer.TAB}" + f"{self.renderer.ANSI_BLACK_SQUARE_BACKGROUND}  {self.renderer.TAB}{self.renderer.ANSI_RESET}\n" +
        f"      1   2   3\n"
        )
        original_stdout = sys.stdout
        output = StringIO()
        sys.stdout = output  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–≤–æ–¥–∞

        self.renderer.render_without_entity(self.board)
        render_result = output.getvalue()
        sys.stdout = original_stdout  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º stdout
        self.assertEqual(render_result, expected_output)


    def test_board_with_herbivore(self):
        """–¢–µ—Å—Ç –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ—Å–∫–∏ —Å —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º."""
        herbivore = Herbivore(Coordinates(2, 2))
        self.board.set_piece(herbivore.coordinates, herbivore)

        # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥ —Å —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (2,2)
        expected_output = (
        f" 3  {self.renderer.ANSI_BLACK_SQUARE_BACKGROUND}  {self.renderer.TAB}" + f"{self.renderer.ANSI_WHITE_SQUARE_BACKGROUND}  {self.renderer.TAB}" + f"{self.renderer.ANSI_BLACK_SQUARE_BACKGROUND}  {self.renderer.TAB}{self.renderer.ANSI_RESET}\n" +
        f" 2  {self.renderer.ANSI_WHITE_SQUARE_BACKGROUND}  {self.renderer.TAB}" + f"{self.renderer.ANSI_BLACK_SQUARE_BACKGROUND} üêá " + f"{self.renderer.ANSI_WHITE_SQUARE_BACKGROUND}  {self.renderer.TAB}{self.renderer.ANSI_RESET}\n" +
        f" 1  {self.renderer.ANSI_BLACK_SQUARE_BACKGROUND}  {self.renderer.TAB}" + f"{self.renderer.ANSI_WHITE_SQUARE_BACKGROUND}  {self.renderer.TAB}" + f"{self.renderer.ANSI_BLACK_SQUARE_BACKGROUND}  {self.renderer.TAB}{self.renderer.ANSI_RESET}\n" +
        f"      1   2   3\n"
        )

        original_stdout = sys.stdout
        output = StringIO()
        sys.stdout = output

        self.renderer.render_without_entity(self.board)
        render_result = output.getvalue()
        sys.stdout = original_stdout
        print()
        self.assertEqual(render_result, expected_output)
        print()


if __name__ == '__main__':
    unittest.main()