import sys
import unittest
from io import StringIO

from src.simulation_from_chess import*
from src.simulation_from_chess.core import board, coordinates
from src.simulation_from_chess.entities import herbivore, grass, predator
from src.simulation_from_chess.renderers import board_console_renderer


class TestBoardRendering(unittest.TestCase):
    def setUp(self):
        """–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º."""
        self.board = Board(3, 3)  # –î–æ—Å–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–º 3x3
        self.renderer = BoardConsoleRenderer()

    def _capture_render_output(self, render_method, *args):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞."""
        original_stdout = sys.stdout
        output = StringIO()
        sys.stdout = output

        if args:
            render_method(*args)
        else:
            render_method()

        render_result = output.getvalue()
        sys.stdout = original_stdout
        return render_result

    def _get_cell(self, background_color, content):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–µ—Ç–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º."""
        return f"{background_color}{content}{self.renderer.ANSI_RESET}"

    def _get_empty_cell(self, background_color):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏."""
        return self._get_cell(background_color, self.renderer.EMPTY_CELL)

    def _get_entity_cell(self, background_color, entity_symbol):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–µ—Ç–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤–æ–º."""
        return self._get_cell(background_color, f" {entity_symbol} ")

    def _get_board_row(self, rank, cells):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–æ—Å–∫–∏."""
        return f"{rank:2d} {''.join(cells)}\n"

    def _get_header_row(self):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤."""
        col_numbers = "     " + f"  {self.renderer.WIDE_SPACE}{self.renderer.EN_SPACE}".join(
            f"{x}" for x in range(1, self.board.width + 1))
        return f"{col_numbers}\n"

    def test_empty_board_rendering(self):
        """–¢–µÔøΩÔøΩ—Ç –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—É—Å—Ç–æ–π –¥–æ—Å–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–º 3x3."""
        render_result = self._capture_render_output(
            self.renderer.render_without_entity,
            self.board
        )

        expected_output = []
        for rank in range(3, 0, -1):
            row_cells = []
            for file in range(1, 4):
                bg_color = (self.renderer.ANSI_BLACK_SQUARE_BACKGROUND 
                           if (rank + file) % 2 == 0 
                           else self.renderer.ANSI_WHITE_SQUARE_BACKGROUND)
                row_cells.append(self._get_empty_cell(bg_color))
            expected_output.append(self._get_board_row(rank, row_cells))
        expected_output.append(self._get_header_row())

        self.assertEqual(render_result, ''.join(expected_output))

    def test_board_with_herbivore(self):
        """–¢–µ—Å—Ç –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ—Å–∫–∏ —Å —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º."""
        herbivore = Herbivore(Coordinates(2, 2))
        self.board.set_piece(herbivore.coordinates, herbivore)

        render_result = self._capture_render_output(
            self.renderer.render,
            self.board
        )

        expected_output = []
        for rank in range(3, 0, -1):
            row_cells = []
            for file in range(1, 4):
                bg_color = (self.renderer.ANSI_BLACK_SQUARE_BACKGROUND 
                           if (rank + file) % 2 == 0 
                           else self.renderer.ANSI_WHITE_SQUARE_BACKGROUND)
                if rank == 2 and file == 2:
                    row_cells.append(self._get_entity_cell(bg_color, "üêá"))
                else:
                    row_cells.append(self._get_empty_cell(bg_color))
            expected_output.append(self._get_board_row(rank, row_cells))
        expected_output.append(self._get_header_row())
        expected_output.append('\n')  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

        self.assertEqual(render_result, ''.join(expected_output))

    def test_render_after_movement(self):
        """–¢–µ—Å—Ç –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–∞."""
        herbivore = Herbivore(Coordinates(1, 2))
        grass = Grass(Coordinates(2, 2))

        self.board.set_piece(herbivore.coordinates, herbivore)
        self.board.set_piece(grass.coordinates, grass)

        render_result = self._capture_render_output(
            self.renderer.render,
            self.board
        )

        expected_output = []
        for rank in range(3, 0, -1):
            row_cells = []
            for file in range(1, 4):
                bg_color = (self.renderer.ANSI_BLACK_SQUARE_BACKGROUND 
                           if (rank + file) % 2 == 0 
                           else self.renderer.ANSI_WHITE_SQUARE_BACKGROUND)
                if rank == 2:
                    if file == 1:
                        row_cells.append(self._get_entity_cell(bg_color, "üêá"))
                    elif file == 2:
                        row_cells.append(self._get_entity_cell(bg_color, "üåæ"))
                    else:
                        row_cells.append(self._get_empty_cell(bg_color))
                else:
                    row_cells.append(self._get_empty_cell(bg_color))
            expected_output.append(self._get_board_row(rank, row_cells))
        expected_output.append(self._get_header_row())
        expected_output.append('\n')  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

        self.assertEqual(render_result, ''.join(expected_output))




if __name__ == '__main__':
    unittest.main()
