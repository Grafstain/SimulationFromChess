import sys
import unittest
from io import StringIO
from unittest.mock import patch

from src.simulation_from_chess.core.board import Board
from src.simulation_from_chess.core.coordinates import Coordinates
from src.simulation_from_chess.entities.grass import Grass
from src.simulation_from_chess.entities.herbivore import Herbivore
from src.simulation_from_chess.entities.predator import Predator
from src.simulation_from_chess.entities.stone import Stone
from src.simulation_from_chess.renderers.board_console_renderer import BoardConsoleRenderer


class TestBoardRendering(unittest.TestCase):
    def setUp(self) -> None:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        self.board = Board(3, 3)  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.renderer = BoardConsoleRenderer()

    def _capture_render_output(self, render_func, *args) -> str:
        """–ó–∞—Ö–≤–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞."""
        with patch('sys.stdout', new=StringIO()) as fake_output:
            render_func(*args)
            return fake_output.getvalue()

    def _get_empty_cell(self, bg_color: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º —Ñ–æ–Ω–∞."""
        return f"{bg_color}{self.renderer.EMPTY_CELL}{self.renderer.ANSI_RESET}"

    def _get_entity_cell(self, bg_color: str, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å —Å—É—â–Ω–æ—Å—Ç—å—é."""
        return f"{bg_color} {symbol} {self.renderer.ANSI_RESET}"

    def _get_board_row(self, rank: int, cells: list) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ—Å–∫–∏."""
        return f"{rank:2d} {''.join(cells)}\n"

    def _get_header_row(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤."""
        return "     " + f"  {self.renderer.WIDE_SPACE}{self.renderer.EN_SPACE}".join(str(i) for i in range(1, 4)) + "\n"

    def test_empty_board_rendering(self):
        """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç–æ–π –¥–æ—Å–∫–∏."""
        render_result = self._capture_render_output(
            self.renderer.render,
            self.board
        )

        expected_output = []
        for rank in range(3, 0, -1):
            row_cells = []
            for file in range(1, 4):
                bg_color = (self.renderer.ANSI_BLACK_SQUARE_BACKGROUND 
                           if (rank + file) % 2 == 0 
                           else self.renderer.ANSI_WHITE_SQUARE_BACKGROUND)
                row_cells.append(self._get_empty_cell(bg_color))
            expected_output.append(self._get_board_row(rank, row_cells))
        expected_output.append(self._get_header_row())
        expected_output.append('\n')

        self.assertEqual(render_result, ''.join(expected_output))

    def test_board_with_herbivore(self):
        """–¢–µ—Å—Ç –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ—Å–∫–∏ —Å —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–º."""
        herbivore = Herbivore(Coordinates(2, 2))
        self.board.place_entity(herbivore.coordinates, herbivore)

        render_result = self._capture_render_output(
            self.renderer.render,
            self.board
        )

        expected_output = []
        for rank in range(3, 0, -1):
            row_cells = []
            for file in range(1, 4):
                bg_color = (self.renderer.ANSI_BLACK_SQUARE_BACKGROUND 
                           if (rank + file) % 2 == 0 
                           else self.renderer.ANSI_WHITE_SQUARE_BACKGROUND)
                if rank == 2 and file == 2:
                    row_cells.append(self._get_entity_cell(bg_color, "üêá"))
                else:
                    row_cells.append(self._get_empty_cell(bg_color))
            expected_output.append(self._get_board_row(rank, row_cells))
        expected_output.append(self._get_header_row())
        expected_output.append('\n')

        self.assertEqual(render_result, ''.join(expected_output))

    def test_render_after_movement(self):
        """–¢–µ—Å—Ç –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–∞."""
        herbivore = Herbivore(Coordinates(1, 2))
        grass = Grass(Coordinates(2, 2))

        self.board.place_entity(herbivore.coordinates, herbivore)
        self.board.place_entity(grass.coordinates, grass)

        render_result = self._capture_render_output(
            self.renderer.render,
            self.board
        )

        expected_output = []
        for rank in range(3, 0, -1):
            row_cells = []
            for file in range(1, 4):
                bg_color = (self.renderer.ANSI_BLACK_SQUARE_BACKGROUND 
                           if (rank + file) % 2 == 0 
                           else self.renderer.ANSI_WHITE_SQUARE_BACKGROUND)
                if rank == 2:
                    if file == 1:
                        row_cells.append(self._get_entity_cell(bg_color, "üêá"))
                    elif file == 2:
                        row_cells.append(self._get_entity_cell(bg_color, "üåæ"))
                    else:
                        row_cells.append(self._get_empty_cell(bg_color))
                else:
                    row_cells.append(self._get_empty_cell(bg_color))
            expected_output.append(self._get_board_row(rank, row_cells))
        expected_output.append(self._get_header_row())
        expected_output.append('\n')

        self.assertEqual(render_result, ''.join(expected_output))

    def test_render_statistics(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    def test_render_different_entities(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π."""
        # –†–∞–∑–º–µ—â–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        entities = [
            (Herbivore(Coordinates(1, 1)), "üêá"),
            (Predator(Coordinates(1, 2)), "üêÖ"),
            (Grass(Coordinates(2, 1)), "üåæ"),
            (Stone(Coordinates(2, 2)), "üåë")
        ]
        
        # –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
        self.board.clear()
        
        for entity, symbol in entities:
            self.board.place_entity(entity.coordinates, entity)
            
            render_result = self._capture_render_output(
                self.renderer.render,
                self.board
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª —Å—É—â–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤—ã–≤–æ–¥–µ
            self.assertIn(
                symbol, 
                render_result,
                f"–°–∏–º–≤–æ–ª {symbol} –¥–ª—è {entity.__class__.__name__} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–≤–æ–¥–µ"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
            bg_color = (self.renderer.ANSI_BLACK_SQUARE_BACKGROUND 
                       if (entity.coordinates.x + entity.coordinates.y) % 2 == 0 
                       else self.renderer.ANSI_WHITE_SQUARE_BACKGROUND)
            cell = self._get_entity_cell(bg_color, symbol)
            self.assertIn(cell, render_result)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            expected_header = "     " + f"  {self.renderer.WIDE_SPACE}{self.renderer.EN_SPACE}".join(
                str(i) for i in range(1, self.board.width + 1)
            ) + "\n"
            self.assertIn(expected_header, render_result)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫
            for rank in range(1, self.board.height + 1):
                self.assertIn(f"{rank:2d}", render_result)

    def test_render_board_borders(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –¥–æ—Å–∫–∏."""
        render_result = self._capture_render_output(
            self.renderer.render,
            self.board
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫
        for rank in range(1, self.board.height + 1):
            self.assertIn(
                str(rank), 
                render_result,
                f"–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ {rank} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–≤–æ–¥–µ"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        for column in range(1, self.board.width + 1):
            self.assertIn(
                str(column),
                render_result, 
                f"–ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ {column} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–≤–æ–¥–µ"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        self.assertIn(
            self.renderer.ANSI_RESET, 
            render_result,
            "–û—Ç—Å—É—ÇÔøΩÔøΩ—Ç–≤—É–µ—Ç —Å–±—Ä–æ—Å —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        expected_lines = self.board.height + 2  # —Å—Ç—Ä–æ–∫–∏ + –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        actual_lines = render_result.count('\n')
        self.assertEqual(
            actual_lines, 
            expected_lines,
            f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_lines}, –ø–æ–ª—É—á–µ–Ω–æ {actual_lines}"
        )

    def test_empty_board(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –¥–æ—Å–∫–∏."""
        render_result = self._capture_render_output(
            self.renderer.render,
            self.board
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –ø—É—Å—Ç—ã–µ
        for rank in range(1, self.board.height + 1):
            for file in range(1, self.board.width + 1):
                bg_color = (self.renderer.ANSI_BLACK_SQUARE_BACKGROUND 
                           if (rank + file) % 2 == 0 
                           else self.renderer.ANSI_WHITE_SQUARE_BACKGROUND)
                empty_cell = self._get_empty_cell(bg_color)
                self.assertIn(
                    empty_cell,
                    render_result,
                    f"–ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ —Å —Ü–≤–µ—Ç–æ–º {bg_color} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {file},{rank}"
                )

    def test_invalid_board_size(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ—Å–∫–∏."""
        with self.assertRaises(ValueError):
            Board(0, 3)
        with self.assertRaises(ValueError):
            Board(3, 0)
        with self.assertRaises(ValueError):
            Board(-1, -1)




if __name__ == '__main__':
    unittest.main()
